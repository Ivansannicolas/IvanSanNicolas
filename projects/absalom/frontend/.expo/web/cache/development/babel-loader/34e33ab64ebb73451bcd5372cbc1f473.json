{"ast":null,"code":"import _slicedToArray from \"@babel/runtime/helpers/slicedToArray\";\nvar _jsxFileName = \"/Users/ivansan/Documents/Programming-repos/absalom/frontend/src/components/CharacterNotes/CharacterNotes.jsx\";\nimport React, { useState, useEffect } from 'react';\nimport ImageBackground from \"react-native-web/dist/exports/ImageBackground\";\nimport Text from \"react-native-web/dist/exports/Text\";\nimport View from \"react-native-web/dist/exports/View\";\nimport TextInput from \"react-native-web/dist/exports/TextInput\";\nimport ScrollView from \"react-native-web/dist/exports/ScrollView\";\nimport Image from \"react-native-web/dist/exports/Image\";\nimport TouchableOpacity from \"react-native-web/dist/exports/TouchableOpacity\";\nimport { Overlay, Button } from 'react-native-elements';\nimport { connect } from 'react-redux';\nimport { createEntry, createNote, deleteNote, editEntry, editNote } from \"./CharacterNotesFunctions\";\nimport { updateCharacter } from \"../../redux/actions/characterActions\";\nimport NavigationBar from \"../NavigationBar/NavigationBar\";\nimport styles from \"./CharacterNotesStyles\";\nimport absalomBackground from \"../../images/absalom-background.png\";\nimport tansparentAddIcon from \"../../images/add-icon-transparent.png\";\nimport addBlueIcon from \"../../images/add-icon-blue.png\";\nimport dotIcon from \"../../images/dot-icon.png\";\n\nfunction CharacterNotes(_ref) {\n  var _this = this;\n\n  var characterItem = _ref.characterItem,\n      userId = _ref.userId,\n      dispatch = _ref.dispatch,\n      navigation = _ref.navigation;\n\n  var _useState = useState(characterItem),\n      _useState2 = _slicedToArray(_useState, 2),\n      character = _useState2[0],\n      setCharacter = _useState2[1];\n\n  var _useState3 = useState(false),\n      _useState4 = _slicedToArray(_useState3, 2),\n      addNoteModalView = _useState4[0],\n      setAddNoteModalView = _useState4[1];\n\n  var _useState5 = useState(false),\n      _useState6 = _slicedToArray(_useState5, 2),\n      editNoteModalView = _useState6[0],\n      setEditNoteModalView = _useState6[1];\n\n  var _useState7 = useState(''),\n      _useState8 = _slicedToArray(_useState7, 2),\n      editNoteModalValue = _useState8[0],\n      setEditNoteModalValue = _useState8[1];\n\n  var _useState9 = useState(false),\n      _useState10 = _slicedToArray(_useState9, 2),\n      deleteNoteModalView = _useState10[0],\n      setDeleteNoteModalView = _useState10[1];\n\n  var _useState11 = useState(false),\n      _useState12 = _slicedToArray(_useState11, 2),\n      addEntryModalView = _useState12[0],\n      setAddEntryModalView = _useState12[1];\n\n  var _useState13 = useState(''),\n      _useState14 = _slicedToArray(_useState13, 2),\n      addEntryModalValue = _useState14[0],\n      setAddEntryModalValue = _useState14[1];\n\n  var _useState15 = useState(false),\n      _useState16 = _slicedToArray(_useState15, 2),\n      editEntryModalView = _useState16[0],\n      setEditEntryModalView = _useState16[1];\n\n  var _useState17 = useState(''),\n      _useState18 = _slicedToArray(_useState17, 2),\n      editEntryModalValue = _useState18[0],\n      setEditEntryModalValue = _useState18[1];\n\n  var _useState19 = useState(''),\n      _useState20 = _slicedToArray(_useState19, 2),\n      entryKey = _useState20[0],\n      setEntryKey = _useState20[1];\n\n  var _useState21 = useState(''),\n      _useState22 = _slicedToArray(_useState21, 2),\n      newNoteName = _useState22[0],\n      setNewNoteName = _useState22[1];\n\n  var _useState23 = useState(''),\n      _useState24 = _slicedToArray(_useState23, 2),\n      noteKey = _useState24[0],\n      setNoteKey = _useState24[1];\n\n  useEffect(function () {\n    setCharacter(characterItem);\n  });\n  return React.createElement(ImageBackground, {\n    source: absalomBackground,\n    style: styles.backgroundImage,\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 40,\n      columnNumber: 5\n    }\n  }, character ? React.createElement(React.Fragment, null, React.createElement(ScrollView, {\n    style: styles.container,\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 43,\n      columnNumber: 11\n    }\n  }, React.createElement(View, {\n    style: styles.notes,\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 44,\n      columnNumber: 13\n    }\n  }, React.createElement(View, {\n    style: styles.character__title,\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 45,\n      columnNumber: 15\n    }\n  }, React.createElement(View, {\n    style: styles.title__bar,\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 46,\n      columnNumber: 17\n    }\n  }), React.createElement(Text, {\n    style: styles.character__name,\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 47,\n      columnNumber: 17\n    }\n  }, character.name + \" Notes\"), React.createElement(View, {\n    style: styles.title__bar,\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 48,\n      columnNumber: 17\n    }\n  })), character.notes.characterNotes.map(function (note) {\n    return React.createElement(View, {\n      style: styles.notes__note,\n      key: performance.now(),\n      __self: _this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 51,\n        columnNumber: 17\n      }\n    }, React.createElement(View, {\n      style: styles.inventory__category__title,\n      __self: _this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 52,\n        columnNumber: 19\n      }\n    }, React.createElement(View, {\n      style: styles.category__title__name,\n      __self: _this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 53,\n        columnNumber: 21\n      }\n    }, React.createElement(TouchableOpacity, {\n      onPress: function onPress() {\n        setNoteKey(note.uniqueKey);\n        setEditNoteModalValue(note.title);\n        setEditNoteModalView(!editNoteModalView);\n      },\n      __self: _this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 54,\n        columnNumber: 23\n      }\n    }, React.createElement(Text, {\n      style: styles.inventory__category__title__text,\n      __self: _this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 61,\n        columnNumber: 25\n      }\n    }, note.title))), React.createElement(TouchableOpacity, {\n      onPress: function onPress() {\n        setNoteKey(note.uniqueKey);\n        setAddEntryModalView(!addEntryModalView);\n      },\n      __self: _this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 64,\n        columnNumber: 21\n      }\n    }, React.createElement(Image, {\n      source: tansparentAddIcon,\n      style: styles.addBlueIcon,\n      __self: _this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 69,\n        columnNumber: 23\n      }\n    }))), note.entries.map(function (entry) {\n      return React.createElement(View, {\n        style: styles.note__row,\n        key: performance.now(),\n        __self: _this,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 73,\n          columnNumber: 21\n        }\n      }, React.createElement(View, {\n        style: styles.note__row__dot,\n        __self: _this,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 74,\n          columnNumber: 23\n        }\n      }, React.createElement(Image, {\n        source: dotIcon,\n        style: styles.dotIcon,\n        __self: _this,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 75,\n          columnNumber: 25\n        }\n      })), React.createElement(TouchableOpacity, {\n        style: styles.note__row__entry,\n        onPress: function onPress() {\n          setEntryKey(entry.uniqueKey);\n          setNoteKey(note.uniqueKey);\n          setEditEntryModalValue(entry.text);\n          setEditEntryModalView(!editNoteModalView);\n        },\n        __self: _this,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 77,\n          columnNumber: 23\n        }\n      }, React.createElement(Text, {\n        style: styles.note__row__entry__text,\n        __self: _this,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 86,\n          columnNumber: 25\n        }\n      }, entry.text)));\n    }));\n  })))) : React.createElement(View, {\n    style: styles.character__title,\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 96,\n      columnNumber: 9\n    }\n  }, React.createElement(View, {\n    style: styles.title__bar,\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 97,\n      columnNumber: 11\n    }\n  }), React.createElement(Text, {\n    style: styles.character__name,\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 98,\n      columnNumber: 11\n    }\n  }, \"No Character\"), React.createElement(View, {\n    style: styles.title__bar,\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 99,\n      columnNumber: 11\n    }\n  })), React.createElement(TouchableOpacity, {\n    style: styles.addIcon__block,\n    onPress: function onPress() {\n      return setAddNoteModalView(!addNoteModalView);\n    },\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 102,\n      columnNumber: 7\n    }\n  }, React.createElement(Image, {\n    source: addBlueIcon,\n    style: styles.addIcon,\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 106,\n      columnNumber: 9\n    }\n  })), React.createElement(Overlay, {\n    name: \"add note modal\",\n    isVisible: addNoteModalView,\n    overlayStyle: styles.noteModal,\n    backdropStyle: styles.noteModal__background,\n    animationType: \"fade\",\n    onBackdropPress: function onBackdropPress() {\n      setAddNoteModalView(!addNoteModalView);\n      setNewNoteName('');\n    },\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 108,\n      columnNumber: 7\n    }\n  }, React.createElement(View, {\n    style: styles.noteModal__block,\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 119,\n      columnNumber: 9\n    }\n  }, React.createElement(Text, {\n    style: styles.noteModal__title,\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 120,\n      columnNumber: 11\n    }\n  }, \"Add new note\"), React.createElement(TextInput, {\n    style: styles.noteModal__text,\n    placeholder: \"Note Name\",\n    maxLength: 20,\n    autoCorrect: false,\n    value: newNoteName,\n    onChangeText: function onChangeText(text) {\n      return setNewNoteName(text);\n    },\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 121,\n      columnNumber: 11\n    }\n  }), React.createElement(Button, {\n    buttonStyle: styles.noteModal__button,\n    title: \"Create Note\",\n    onPress: function onPress() {\n      setNewNoteName('');\n      setAddNoteModalView(!addNoteModalView);\n      createNote(character, newNoteName, updateCharacter, dispatch);\n    },\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 129,\n      columnNumber: 11\n    }\n  }))), React.createElement(Overlay, {\n    name: \"edit note modal\",\n    isVisible: editNoteModalView,\n    overlayStyle: styles.noteModal,\n    animationType: \"fade\",\n    onBackdropPress: function onBackdropPress() {\n      setEditNoteModalView(!editNoteModalView);\n      setEditNoteModalValue('');\n      setNoteKey('');\n    },\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 140,\n      columnNumber: 7\n    }\n  }, React.createElement(View, {\n    style: styles.noteModal__block,\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 151,\n      columnNumber: 9\n    }\n  }, React.createElement(Text, {\n    style: styles.noteModal__title,\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 152,\n      columnNumber: 11\n    }\n  }, \"Edit Note\"), React.createElement(TextInput, {\n    style: styles.noteModal__text,\n    placeholder: \"Note Name\",\n    multiline: true,\n    maxLength: 30,\n    autoCorrect: false,\n    value: editNoteModalValue,\n    onChangeText: function onChangeText(text) {\n      return setEditNoteModalValue(text);\n    },\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 153,\n      columnNumber: 11\n    }\n  }), React.createElement(View, {\n    style: styles.editNoteModal__buttons,\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 162,\n      columnNumber: 11\n    }\n  }, React.createElement(Button, {\n    buttonStyle: styles.editNoteModal__editButton,\n    title: \"Edit\",\n    onPress: function onPress() {\n      editNote(character, noteKey, editNoteModalValue, updateCharacter, dispatch);\n      setEditNoteModalValue('');\n      setNoteKey('');\n      setEditNoteModalView(!editNoteModalView);\n    },\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 163,\n      columnNumber: 13\n    }\n  }), React.createElement(Button, {\n    buttonStyle: styles.editNoteModal__deleteButton,\n    title: \"Delete\",\n    onPress: function onPress() {\n      setEditNoteModalView(!editNoteModalView);\n      setDeleteNoteModalView(!deleteNoteModalView);\n    },\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 175,\n      columnNumber: 13\n    }\n  })))), React.createElement(Overlay, {\n    name: \"delete note modal\",\n    isVisible: deleteNoteModalView,\n    overlayStyle: styles.noteModal,\n    animationType: \"fade\",\n    fullScreen: true,\n    onBackdropPress: function onBackdropPress() {\n      setDeleteNoteModalView(!deleteNoteModalView);\n    },\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 186,\n      columnNumber: 7\n    }\n  }, React.createElement(View, {\n    style: styles.deleteNoteModal__block,\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 196,\n      columnNumber: 9\n    }\n  }, React.createElement(Text, {\n    style: styles.deleteNoteModal__text,\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 197,\n      columnNumber: 11\n    }\n  }, \"You are about to delete\"), React.createElement(Text, {\n    style: styles.deleteNoteModal__note__name,\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 200,\n      columnNumber: 11\n    }\n  }, editNoteModalValue), React.createElement(Text, {\n    style: styles.deleteNoteModal__text,\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 203,\n      columnNumber: 11\n    }\n  }, \"and all the entries it contains.\"), React.createElement(View, {\n    style: styles.editModal__textBlock,\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 206,\n      columnNumber: 11\n    }\n  }, React.createElement(Text, {\n    style: styles.deleteNoteModal__warningText,\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 207,\n      columnNumber: 13\n    }\n  }, \"This action is irreversible.\")), React.createElement(Button, {\n    title: \"Delete\",\n    buttonStyle: styles.editNoteModal__deleteButton,\n    onPress: function onPress() {\n      deleteNote(character, noteKey, updateCharacter, dispatch);\n      setNoteKey('');\n      setEditNoteModalValue('');\n      setDeleteNoteModalView(!deleteNoteModalView);\n    },\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 211,\n      columnNumber: 11\n    }\n  }))), React.createElement(Overlay, {\n    name: \"add entry modal\",\n    isVisible: addEntryModalView,\n    overlayStyle: styles.entryModal,\n    backdropStyle: styles.noteModal__background,\n    animationType: \"fade\",\n    onBackdropPress: function onBackdropPress() {\n      setAddEntryModalView(!addEntryModalView);\n      setAddEntryModalValue('');\n    },\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 223,\n      columnNumber: 7\n    }\n  }, React.createElement(View, {\n    style: styles.noteModal__block,\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 234,\n      columnNumber: 9\n    }\n  }, React.createElement(Text, {\n    style: styles.entryModal__title,\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 235,\n      columnNumber: 11\n    }\n  }, \"Add new entry\"), React.createElement(ScrollView, {\n    style: {\n      width: '90%'\n    },\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 236,\n      columnNumber: 11\n    }\n  }, React.createElement(TextInput, {\n    style: styles.entryModal__text,\n    placeholder: \"Entry\",\n    multiline: true,\n    autoCorrect: false,\n    value: addEntryModalValue,\n    onChangeText: function onChangeText(text) {\n      return setAddEntryModalValue(text);\n    },\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 237,\n      columnNumber: 13\n    }\n  })), React.createElement(Button, {\n    buttonStyle: styles.noteModal__button,\n    title: \"Create Entry\",\n    onPress: function onPress() {\n      createEntry(character, noteKey, addEntryModalValue, updateCharacter, dispatch);\n      setAddEntryModalValue('');\n      setAddEntryModalView(!addEntryModalView);\n    },\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 246,\n      columnNumber: 11\n    }\n  }))), React.createElement(Overlay, {\n    name: \"edit entry modal\",\n    isVisible: editEntryModalView,\n    overlayStyle: styles.entryModal,\n    backdropStyle: styles.noteModal__background,\n    animationType: \"fade\",\n    onBackdropPress: function onBackdropPress() {\n      setEditEntryModalView(!editEntryModalView);\n      setEditEntryModalValue('');\n    },\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 257,\n      columnNumber: 7\n    }\n  }, React.createElement(View, {\n    style: styles.noteModal__block,\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 268,\n      columnNumber: 9\n    }\n  }, React.createElement(Text, {\n    style: styles.entryModal__title,\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 269,\n      columnNumber: 11\n    }\n  }, \"Edit entry\"), React.createElement(ScrollView, {\n    style: {\n      width: '90%'\n    },\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 270,\n      columnNumber: 11\n    }\n  }, React.createElement(TextInput, {\n    style: styles.entryModal__text,\n    placeholder: \"Entry\",\n    multiline: true,\n    autoCorrect: false,\n    value: editEntryModalValue,\n    onChangeText: function onChangeText(text) {\n      return setEditEntryModalValue(text);\n    },\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 271,\n      columnNumber: 13\n    }\n  })), React.createElement(Button, {\n    buttonStyle: styles.noteModal__button,\n    title: \"Edit Entry\",\n    onPress: function onPress() {\n      editEntry(character, noteKey, entryKey, addEntryModalValue, updateCharacter, dispatch);\n      setEditEntryModalValue('');\n      setEditEntryModalView(!addEntryModalView);\n    },\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 280,\n      columnNumber: 11\n    }\n  }))), React.createElement(NavigationBar, {\n    navigation: navigation,\n    userId: userId,\n    dispatch: dispatch,\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 291,\n      columnNumber: 7\n    }\n  }));\n}\n\nfunction mapStateToProps(_ref2) {\n  var charactersReducer = _ref2.charactersReducer,\n      usersReducer = _ref2.usersReducer;\n  return {\n    characterItem: charactersReducer.characterItem,\n    userId: usersReducer.userId\n  };\n}\n\nexport default connect(mapStateToProps)(CharacterNotes);","map":{"version":3,"sources":["/Users/ivansan/Documents/Programming-repos/absalom/frontend/src/components/CharacterNotes/CharacterNotes.jsx"],"names":["React","useState","useEffect","Overlay","Button","connect","createEntry","createNote","deleteNote","editEntry","editNote","updateCharacter","NavigationBar","styles","absalomBackground","tansparentAddIcon","addBlueIcon","dotIcon","CharacterNotes","characterItem","userId","dispatch","navigation","character","setCharacter","addNoteModalView","setAddNoteModalView","editNoteModalView","setEditNoteModalView","editNoteModalValue","setEditNoteModalValue","deleteNoteModalView","setDeleteNoteModalView","addEntryModalView","setAddEntryModalView","addEntryModalValue","setAddEntryModalValue","editEntryModalView","setEditEntryModalView","editEntryModalValue","setEditEntryModalValue","entryKey","setEntryKey","newNoteName","setNewNoteName","noteKey","setNoteKey","backgroundImage","container","notes","character__title","title__bar","character__name","name","characterNotes","map","note","notes__note","performance","now","inventory__category__title","category__title__name","uniqueKey","title","inventory__category__title__text","entries","entry","note__row","note__row__dot","note__row__entry","text","note__row__entry__text","addIcon__block","addIcon","noteModal","noteModal__background","noteModal__block","noteModal__title","noteModal__text","noteModal__button","editNoteModal__buttons","editNoteModal__editButton","editNoteModal__deleteButton","deleteNoteModal__block","deleteNoteModal__text","deleteNoteModal__note__name","editModal__textBlock","deleteNoteModal__warningText","entryModal","entryModal__title","width","entryModal__text","mapStateToProps","charactersReducer","usersReducer"],"mappings":";;AAAA,OAAOA,KAAP,IAAgBC,QAAhB,EAA0BC,SAA1B,QAA2C,OAA3C;;;;;;;;AAKA,SAASC,OAAT,EAAkBC,MAAlB,QAAgC,uBAAhC;AACA,SAASC,OAAT,QAAwB,aAAxB;AACA,SACEC,WADF,EACeC,UADf,EAC2BC,UAD3B,EACuCC,SADvC,EACkDC,QADlD;AAGA,SAASC,eAAT;AACA,OAAOC,aAAP;AACA,OAAOC,MAAP;AACA,OAAOC,iBAAP;AACA,OAAOC,iBAAP;AACA,OAAOC,WAAP;AACA,OAAOC,OAAP;;AAEA,SAASC,cAAT,OAEG;AAAA;;AAAA,MADDC,aACC,QADDA,aACC;AAAA,MADcC,MACd,QADcA,MACd;AAAA,MADsBC,QACtB,QADsBA,QACtB;AAAA,MADgCC,UAChC,QADgCA,UAChC;;AAAA,kBACiCrB,QAAQ,CAACkB,aAAD,CADzC;AAAA;AAAA,MACMI,SADN;AAAA,MACiBC,YADjB;;AAAA,mBAE+CvB,QAAQ,CAAC,KAAD,CAFvD;AAAA;AAAA,MAEMwB,gBAFN;AAAA,MAEwBC,mBAFxB;;AAAA,mBAGiDzB,QAAQ,CAAC,KAAD,CAHzD;AAAA;AAAA,MAGM0B,iBAHN;AAAA,MAGyBC,oBAHzB;;AAAA,mBAImD3B,QAAQ,CAAC,EAAD,CAJ3D;AAAA;AAAA,MAIM4B,kBAJN;AAAA,MAI0BC,qBAJ1B;;AAAA,mBAKqD7B,QAAQ,CAAC,KAAD,CAL7D;AAAA;AAAA,MAKM8B,mBALN;AAAA,MAK2BC,sBAL3B;;AAAA,oBAMiD/B,QAAQ,CAAC,KAAD,CANzD;AAAA;AAAA,MAMMgC,iBANN;AAAA,MAMyBC,oBANzB;;AAAA,oBAOmDjC,QAAQ,CAAC,EAAD,CAP3D;AAAA;AAAA,MAOMkC,kBAPN;AAAA,MAO0BC,qBAP1B;;AAAA,oBAQmDnC,QAAQ,CAAC,KAAD,CAR3D;AAAA;AAAA,MAQMoC,kBARN;AAAA,MAQ0BC,qBAR1B;;AAAA,oBASqDrC,QAAQ,CAAC,EAAD,CAT7D;AAAA;AAAA,MASMsC,mBATN;AAAA,MAS2BC,sBAT3B;;AAAA,oBAU+BvC,QAAQ,CAAC,EAAD,CAVvC;AAAA;AAAA,MAUMwC,QAVN;AAAA,MAUgBC,WAVhB;;AAAA,oBAWqCzC,QAAQ,CAAC,EAAD,CAX7C;AAAA;AAAA,MAWM0C,WAXN;AAAA,MAWmBC,cAXnB;;AAAA,oBAY6B3C,QAAQ,CAAC,EAAD,CAZrC;AAAA;AAAA,MAYM4C,OAZN;AAAA,MAYeC,UAZf;;AAcD5C,EAAAA,SAAS,CAAC,YAAM;AACdsB,IAAAA,YAAY,CAACL,aAAD,CAAZ;AACD,GAFQ,CAAT;AAIA,SACE,oBAAC,eAAD;AAAiB,IAAA,MAAM,EAAEL,iBAAzB;AAA4C,IAAA,KAAK,EAAED,MAAM,CAACkC,eAA1D;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,KACGxB,SAAS,GACR,0CACE,oBAAC,UAAD;AAAY,IAAA,KAAK,EAAEV,MAAM,CAACmC,SAA1B;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,KACE,oBAAC,IAAD;AAAM,IAAA,KAAK,EAAEnC,MAAM,CAACoC,KAApB;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,KACE,oBAAC,IAAD;AAAM,IAAA,KAAK,EAAEpC,MAAM,CAACqC,gBAApB;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,KACE,oBAAC,IAAD;AAAM,IAAA,KAAK,EAAErC,MAAM,CAACsC,UAApB;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,IADF,EAEE,oBAAC,IAAD;AAAM,IAAA,KAAK,EAAEtC,MAAM,CAACuC,eAApB;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,KAAyC7B,SAAS,CAAC8B,IAAnD,YAFF,EAGE,oBAAC,IAAD;AAAM,IAAA,KAAK,EAAExC,MAAM,CAACsC,UAApB;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,IAHF,CADF,EAMG5B,SAAS,CAAC0B,KAAV,CAAgBK,cAAhB,CAA+BC,GAA/B,CAAmC,UAACC,IAAD;AAAA,WAClC,oBAAC,IAAD;AAAM,MAAA,KAAK,EAAE3C,MAAM,CAAC4C,WAApB;AAAiC,MAAA,GAAG,EAAEC,WAAW,CAACC,GAAZ,EAAtC;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,OACE,oBAAC,IAAD;AAAM,MAAA,KAAK,EAAE9C,MAAM,CAAC+C,0BAApB;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,OACE,oBAAC,IAAD;AAAM,MAAA,KAAK,EAAE/C,MAAM,CAACgD,qBAApB;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,OACE,oBAAC,gBAAD;AACE,MAAA,OAAO,EAAE,mBAAM;AACbf,QAAAA,UAAU,CAACU,IAAI,CAACM,SAAN,CAAV;AACAhC,QAAAA,qBAAqB,CAAC0B,IAAI,CAACO,KAAN,CAArB;AACAnC,QAAAA,oBAAoB,CAAC,CAACD,iBAAF,CAApB;AACD,OALH;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,OAOE,oBAAC,IAAD;AAAM,MAAA,KAAK,EAAEd,MAAM,CAACmD,gCAApB;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,OAAuDR,IAAI,CAACO,KAA5D,CAPF,CADF,CADF,EAYE,oBAAC,gBAAD;AAAkB,MAAA,OAAO,EAAE,mBAAM;AAC/BjB,QAAAA,UAAU,CAACU,IAAI,CAACM,SAAN,CAAV;AACA5B,QAAAA,oBAAoB,CAAC,CAACD,iBAAF,CAApB;AACD,OAHD;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,OAKE,oBAAC,KAAD;AAAO,MAAA,MAAM,EAAElB,iBAAf;AAAkC,MAAA,KAAK,EAAEF,MAAM,CAACG,WAAhD;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,MALF,CAZF,CADF,EAqBGwC,IAAI,CAACS,OAAL,CAAaV,GAAb,CAAiB,UAACW,KAAD;AAAA,aAChB,oBAAC,IAAD;AAAM,QAAA,KAAK,EAAErD,MAAM,CAACsD,SAApB;AAA+B,QAAA,GAAG,EAAET,WAAW,CAACC,GAAZ,EAApC;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,SACE,oBAAC,IAAD;AAAM,QAAA,KAAK,EAAE9C,MAAM,CAACuD,cAApB;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,SACE,oBAAC,KAAD;AAAO,QAAA,MAAM,EAAEnD,OAAf;AAAwB,QAAA,KAAK,EAAEJ,MAAM,CAACI,OAAtC;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,QADF,CADF,EAIE,oBAAC,gBAAD;AACE,QAAA,KAAK,EAAEJ,MAAM,CAACwD,gBADhB;AAEE,QAAA,OAAO,EAAE,mBAAM;AACb3B,UAAAA,WAAW,CAACwB,KAAK,CAACJ,SAAP,CAAX;AACAhB,UAAAA,UAAU,CAACU,IAAI,CAACM,SAAN,CAAV;AACAtB,UAAAA,sBAAsB,CAAC0B,KAAK,CAACI,IAAP,CAAtB;AACAhC,UAAAA,qBAAqB,CAAC,CAACX,iBAAF,CAArB;AACD,SAPH;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,SASE,oBAAC,IAAD;AAAM,QAAA,KAAK,EAAEd,MAAM,CAAC0D,sBAApB;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,SAA6CL,KAAK,CAACI,IAAnD,CATF,CAJF,CADgB;AAAA,KAAjB,CArBH,CADkC;AAAA,GAAnC,CANH,CADF,CADF,CADQ,GAuDR,oBAAC,IAAD;AAAM,IAAA,KAAK,EAAEzD,MAAM,CAACqC,gBAApB;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,KACE,oBAAC,IAAD;AAAM,IAAA,KAAK,EAAErC,MAAM,CAACsC,UAApB;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,IADF,EAEE,oBAAC,IAAD;AAAM,IAAA,KAAK,EAAEtC,MAAM,CAACuC,eAApB;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,oBAFF,EAGE,oBAAC,IAAD;AAAM,IAAA,KAAK,EAAEvC,MAAM,CAACsC,UAApB;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,IAHF,CAxDJ,EA8DE,oBAAC,gBAAD;AACE,IAAA,KAAK,EAAEtC,MAAM,CAAC2D,cADhB;AAEE,IAAA,OAAO,EAAE;AAAA,aAAM9C,mBAAmB,CAAC,CAACD,gBAAF,CAAzB;AAAA,KAFX;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,KAIE,oBAAC,KAAD;AAAO,IAAA,MAAM,EAAET,WAAf;AAA4B,IAAA,KAAK,EAAEH,MAAM,CAAC4D,OAA1C;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,IAJF,CA9DF,EAoEE,oBAAC,OAAD;AACE,IAAA,IAAI,EAAC,gBADP;AAEE,IAAA,SAAS,EAAEhD,gBAFb;AAGE,IAAA,YAAY,EAAEZ,MAAM,CAAC6D,SAHvB;AAIE,IAAA,aAAa,EAAE7D,MAAM,CAAC8D,qBAJxB;AAKE,IAAA,aAAa,EAAC,MALhB;AAME,IAAA,eAAe,EAAE,2BAAM;AACrBjD,MAAAA,mBAAmB,CAAC,CAACD,gBAAF,CAAnB;AACAmB,MAAAA,cAAc,CAAC,EAAD,CAAd;AACD,KATH;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,KAWE,oBAAC,IAAD;AAAM,IAAA,KAAK,EAAE/B,MAAM,CAAC+D,gBAApB;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,KACE,oBAAC,IAAD;AAAM,IAAA,KAAK,EAAE/D,MAAM,CAACgE,gBAApB;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,oBADF,EAEE,oBAAC,SAAD;AACE,IAAA,KAAK,EAAEhE,MAAM,CAACiE,eADhB;AAEE,IAAA,WAAW,EAAC,WAFd;AAGE,IAAA,SAAS,EAAE,EAHb;AAIE,IAAA,WAAW,EAAE,KAJf;AAKE,IAAA,KAAK,EAAEnC,WALT;AAME,IAAA,YAAY,EAAE,sBAAC2B,IAAD;AAAA,aAAU1B,cAAc,CAAC0B,IAAD,CAAxB;AAAA,KANhB;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,IAFF,EAUE,oBAAC,MAAD;AACE,IAAA,WAAW,EAAEzD,MAAM,CAACkE,iBADtB;AAEE,IAAA,KAAK,EAAC,aAFR;AAGE,IAAA,OAAO,EAAE,mBAAM;AACbnC,MAAAA,cAAc,CAAC,EAAD,CAAd;AACAlB,MAAAA,mBAAmB,CAAC,CAACD,gBAAF,CAAnB;AACAlB,MAAAA,UAAU,CAACgB,SAAD,EAAYoB,WAAZ,EAAyBhC,eAAzB,EAA0CU,QAA1C,CAAV;AACD,KAPH;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,IAVF,CAXF,CApEF,EAoGE,oBAAC,OAAD;AACE,IAAA,IAAI,EAAC,iBADP;AAEE,IAAA,SAAS,EAAEM,iBAFb;AAGE,IAAA,YAAY,EAAEd,MAAM,CAAC6D,SAHvB;AAIE,IAAA,aAAa,EAAC,MAJhB;AAKE,IAAA,eAAe,EAAE,2BAAM;AACrB9C,MAAAA,oBAAoB,CAAC,CAACD,iBAAF,CAApB;AACAG,MAAAA,qBAAqB,CAAC,EAAD,CAArB;AACAgB,MAAAA,UAAU,CAAC,EAAD,CAAV;AACD,KATH;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,KAWE,oBAAC,IAAD;AAAM,IAAA,KAAK,EAAEjC,MAAM,CAAC+D,gBAApB;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,KACE,oBAAC,IAAD;AAAM,IAAA,KAAK,EAAE/D,MAAM,CAACgE,gBAApB;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,iBADF,EAEE,oBAAC,SAAD;AACE,IAAA,KAAK,EAAEhE,MAAM,CAACiE,eADhB;AAEE,IAAA,WAAW,EAAC,WAFd;AAGE,IAAA,SAAS,MAHX;AAIE,IAAA,SAAS,EAAE,EAJb;AAKE,IAAA,WAAW,EAAE,KALf;AAME,IAAA,KAAK,EAAEjD,kBANT;AAOE,IAAA,YAAY,EAAE,sBAACyC,IAAD;AAAA,aAAUxC,qBAAqB,CAACwC,IAAD,CAA/B;AAAA,KAPhB;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,IAFF,EAWE,oBAAC,IAAD;AAAM,IAAA,KAAK,EAAEzD,MAAM,CAACmE,sBAApB;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,KACE,oBAAC,MAAD;AACE,IAAA,WAAW,EAAEnE,MAAM,CAACoE,yBADtB;AAEE,IAAA,KAAK,EAAC,MAFR;AAGE,IAAA,OAAO,EAAE,mBAAM;AACbvE,MAAAA,QAAQ,CACNa,SADM,EACKsB,OADL,EACchB,kBADd,EACkClB,eADlC,EACmDU,QADnD,CAAR;AAGAS,MAAAA,qBAAqB,CAAC,EAAD,CAArB;AACAgB,MAAAA,UAAU,CAAC,EAAD,CAAV;AACAlB,MAAAA,oBAAoB,CAAC,CAACD,iBAAF,CAApB;AACD,KAVH;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,IADF,EAaE,oBAAC,MAAD;AACE,IAAA,WAAW,EAAEd,MAAM,CAACqE,2BADtB;AAEE,IAAA,KAAK,EAAC,QAFR;AAGE,IAAA,OAAO,EAAE,mBAAM;AACbtD,MAAAA,oBAAoB,CAAC,CAACD,iBAAF,CAApB;AACAK,MAAAA,sBAAsB,CAAC,CAACD,mBAAF,CAAtB;AACD,KANH;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,IAbF,CAXF,CAXF,CApGF,EAkJE,oBAAC,OAAD;AACE,IAAA,IAAI,EAAC,mBADP;AAEE,IAAA,SAAS,EAAEA,mBAFb;AAGE,IAAA,YAAY,EAAElB,MAAM,CAAC6D,SAHvB;AAIE,IAAA,aAAa,EAAC,MAJhB;AAKE,IAAA,UAAU,MALZ;AAME,IAAA,eAAe,EAAE,2BAAM;AACrB1C,MAAAA,sBAAsB,CAAC,CAACD,mBAAF,CAAtB;AACD,KARH;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,KAUE,oBAAC,IAAD;AAAM,IAAA,KAAK,EAAElB,MAAM,CAACsE,sBAApB;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,KACE,oBAAC,IAAD;AAAM,IAAA,KAAK,EAAEtE,MAAM,CAACuE,qBAApB;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,+BADF,EAIE,oBAAC,IAAD;AAAM,IAAA,KAAK,EAAEvE,MAAM,CAACwE,2BAApB;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,KACGxD,kBADH,CAJF,EAOE,oBAAC,IAAD;AAAM,IAAA,KAAK,EAAEhB,MAAM,CAACuE,qBAApB;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,wCAPF,EAUE,oBAAC,IAAD;AAAM,IAAA,KAAK,EAAEvE,MAAM,CAACyE,oBAApB;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,KACE,oBAAC,IAAD;AAAM,IAAA,KAAK,EAAEzE,MAAM,CAAC0E,4BAApB;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,oCADF,CAVF,EAeE,oBAAC,MAAD;AACE,IAAA,KAAK,EAAC,QADR;AAEE,IAAA,WAAW,EAAE1E,MAAM,CAACqE,2BAFtB;AAGE,IAAA,OAAO,EAAE,mBAAM;AACb1E,MAAAA,UAAU,CAACe,SAAD,EAAYsB,OAAZ,EAAqBlC,eAArB,EAAsCU,QAAtC,CAAV;AACAyB,MAAAA,UAAU,CAAC,EAAD,CAAV;AACAhB,MAAAA,qBAAqB,CAAC,EAAD,CAArB;AACAE,MAAAA,sBAAsB,CAAC,CAACD,mBAAF,CAAtB;AACD,KARH;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,IAfF,CAVF,CAlJF,EAuLE,oBAAC,OAAD;AACE,IAAA,IAAI,EAAC,iBADP;AAEE,IAAA,SAAS,EAAEE,iBAFb;AAGE,IAAA,YAAY,EAAEpB,MAAM,CAAC2E,UAHvB;AAIE,IAAA,aAAa,EAAE3E,MAAM,CAAC8D,qBAJxB;AAKE,IAAA,aAAa,EAAC,MALhB;AAME,IAAA,eAAe,EAAE,2BAAM;AACrBzC,MAAAA,oBAAoB,CAAC,CAACD,iBAAF,CAApB;AACAG,MAAAA,qBAAqB,CAAC,EAAD,CAArB;AACD,KATH;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,KAWE,oBAAC,IAAD;AAAM,IAAA,KAAK,EAAEvB,MAAM,CAAC+D,gBAApB;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,KACE,oBAAC,IAAD;AAAM,IAAA,KAAK,EAAE/D,MAAM,CAAC4E,iBAApB;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,qBADF,EAEE,oBAAC,UAAD;AAAY,IAAA,KAAK,EAAE;AAAEC,MAAAA,KAAK,EAAE;AAAT,KAAnB;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,KACE,oBAAC,SAAD;AACE,IAAA,KAAK,EAAE7E,MAAM,CAAC8E,gBADhB;AAEE,IAAA,WAAW,EAAC,OAFd;AAGE,IAAA,SAAS,MAHX;AAIE,IAAA,WAAW,EAAE,KAJf;AAKE,IAAA,KAAK,EAAExD,kBALT;AAME,IAAA,YAAY,EAAE,sBAACmC,IAAD;AAAA,aAAUlC,qBAAqB,CAACkC,IAAD,CAA/B;AAAA,KANhB;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,IADF,CAFF,EAYE,oBAAC,MAAD;AACE,IAAA,WAAW,EAAEzD,MAAM,CAACkE,iBADtB;AAEE,IAAA,KAAK,EAAC,cAFR;AAGE,IAAA,OAAO,EAAE,mBAAM;AACbzE,MAAAA,WAAW,CAACiB,SAAD,EAAYsB,OAAZ,EAAqBV,kBAArB,EAAyCxB,eAAzC,EAA0DU,QAA1D,CAAX;AACAe,MAAAA,qBAAqB,CAAC,EAAD,CAArB;AACAF,MAAAA,oBAAoB,CAAC,CAACD,iBAAF,CAApB;AACD,KAPH;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,IAZF,CAXF,CAvLF,EAyNE,oBAAC,OAAD;AACE,IAAA,IAAI,EAAC,kBADP;AAEE,IAAA,SAAS,EAAEI,kBAFb;AAGE,IAAA,YAAY,EAAExB,MAAM,CAAC2E,UAHvB;AAIE,IAAA,aAAa,EAAE3E,MAAM,CAAC8D,qBAJxB;AAKE,IAAA,aAAa,EAAC,MALhB;AAME,IAAA,eAAe,EAAE,2BAAM;AACrBrC,MAAAA,qBAAqB,CAAC,CAACD,kBAAF,CAArB;AACAG,MAAAA,sBAAsB,CAAC,EAAD,CAAtB;AACD,KATH;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,KAWE,oBAAC,IAAD;AAAM,IAAA,KAAK,EAAE3B,MAAM,CAAC+D,gBAApB;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,KACE,oBAAC,IAAD;AAAM,IAAA,KAAK,EAAE/D,MAAM,CAAC4E,iBAApB;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,kBADF,EAEE,oBAAC,UAAD;AAAY,IAAA,KAAK,EAAE;AAAEC,MAAAA,KAAK,EAAE;AAAT,KAAnB;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,KACE,oBAAC,SAAD;AACE,IAAA,KAAK,EAAE7E,MAAM,CAAC8E,gBADhB;AAEE,IAAA,WAAW,EAAC,OAFd;AAGE,IAAA,SAAS,MAHX;AAIE,IAAA,WAAW,EAAE,KAJf;AAKE,IAAA,KAAK,EAAEpD,mBALT;AAME,IAAA,YAAY,EAAE,sBAAC+B,IAAD;AAAA,aAAU9B,sBAAsB,CAAC8B,IAAD,CAAhC;AAAA,KANhB;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,IADF,CAFF,EAYE,oBAAC,MAAD;AACE,IAAA,WAAW,EAAEzD,MAAM,CAACkE,iBADtB;AAEE,IAAA,KAAK,EAAC,YAFR;AAGE,IAAA,OAAO,EAAE,mBAAM;AACbtE,MAAAA,SAAS,CAACc,SAAD,EAAYsB,OAAZ,EAAqBJ,QAArB,EAA+BN,kBAA/B,EAAmDxB,eAAnD,EAAoEU,QAApE,CAAT;AACAmB,MAAAA,sBAAsB,CAAC,EAAD,CAAtB;AACAF,MAAAA,qBAAqB,CAAC,CAACL,iBAAF,CAArB;AACD,KAPH;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,IAZF,CAXF,CAzNF,EA2PE,oBAAC,aAAD;AAAe,IAAA,UAAU,EAAEX,UAA3B;AAAuC,IAAA,MAAM,EAAEF,MAA/C;AAAuD,IAAA,QAAQ,EAAEC,QAAjE;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,IA3PF,CADF;AA+PD;;AAED,SAASuE,eAAT,QAA8D;AAAA,MAAnCC,iBAAmC,SAAnCA,iBAAmC;AAAA,MAAhBC,YAAgB,SAAhBA,YAAgB;AAC5D,SAAO;AACL3E,IAAAA,aAAa,EAAE0E,iBAAiB,CAAC1E,aAD5B;AAELC,IAAAA,MAAM,EAAE0E,YAAY,CAAC1E;AAFhB,GAAP;AAID;;AAED,eAAef,OAAO,CAACuF,eAAD,CAAP,CAAyB1E,cAAzB,CAAf","sourcesContent":["import React, { useState, useEffect } from 'react';\nimport {\n  ImageBackground, Text, View, TextInput,\n  ScrollView, Image, TouchableOpacity,\n} from 'react-native';\nimport { Overlay, Button } from 'react-native-elements';\nimport { connect } from 'react-redux';\nimport {\n  createEntry, createNote, deleteNote, editEntry, editNote,\n} from './CharacterNotesFunctions';\nimport { updateCharacter } from '../../redux/actions/characterActions';\nimport NavigationBar from '../NavigationBar/NavigationBar';\nimport styles from './CharacterNotesStyles';\nimport absalomBackground from '../../images/absalom-background.png';\nimport tansparentAddIcon from '../../images/add-icon-transparent.png';\nimport addBlueIcon from '../../images/add-icon-blue.png';\nimport dotIcon from '../../images/dot-icon.png';\n\nfunction CharacterNotes({\n  characterItem, userId, dispatch, navigation,\n}) {\n  const [character, setCharacter] = useState(characterItem);\n  const [addNoteModalView, setAddNoteModalView] = useState(false);\n  const [editNoteModalView, setEditNoteModalView] = useState(false);\n  const [editNoteModalValue, setEditNoteModalValue] = useState('');\n  const [deleteNoteModalView, setDeleteNoteModalView] = useState(false);\n  const [addEntryModalView, setAddEntryModalView] = useState(false);\n  const [addEntryModalValue, setAddEntryModalValue] = useState('');\n  const [editEntryModalView, setEditEntryModalView] = useState(false);\n  const [editEntryModalValue, setEditEntryModalValue] = useState('');\n  const [entryKey, setEntryKey] = useState('');\n  const [newNoteName, setNewNoteName] = useState('');\n  const [noteKey, setNoteKey] = useState('');\n\n  useEffect(() => {\n    setCharacter(characterItem);\n  });\n\n  return (\n    <ImageBackground source={absalomBackground} style={styles.backgroundImage}>\n      {character ? (\n        <>\n          <ScrollView style={styles.container}>\n            <View style={styles.notes}>\n              <View style={styles.character__title}>\n                <View style={styles.title__bar} />\n                <Text style={styles.character__name}>{`${character.name} Notes`}</Text>\n                <View style={styles.title__bar} />\n              </View>\n              {character.notes.characterNotes.map((note) => (\n                <View style={styles.notes__note} key={performance.now()}>\n                  <View style={styles.inventory__category__title}>\n                    <View style={styles.category__title__name}>\n                      <TouchableOpacity\n                        onPress={() => {\n                          setNoteKey(note.uniqueKey);\n                          setEditNoteModalValue(note.title);\n                          setEditNoteModalView(!editNoteModalView);\n                        }}\n                      >\n                        <Text style={styles.inventory__category__title__text}>{note.title}</Text>\n                      </TouchableOpacity>\n                    </View>\n                    <TouchableOpacity onPress={() => {\n                      setNoteKey(note.uniqueKey);\n                      setAddEntryModalView(!addEntryModalView);\n                    }}\n                    >\n                      <Image source={tansparentAddIcon} style={styles.addBlueIcon} />\n                    </TouchableOpacity>\n                  </View>\n                  {note.entries.map((entry) => (\n                    <View style={styles.note__row} key={performance.now()}>\n                      <View style={styles.note__row__dot}>\n                        <Image source={dotIcon} style={styles.dotIcon} />\n                      </View>\n                      <TouchableOpacity\n                        style={styles.note__row__entry}\n                        onPress={() => {\n                          setEntryKey(entry.uniqueKey);\n                          setNoteKey(note.uniqueKey);\n                          setEditEntryModalValue(entry.text);\n                          setEditEntryModalView(!editNoteModalView);\n                        }}\n                      >\n                        <Text style={styles.note__row__entry__text}>{entry.text}</Text>\n                      </TouchableOpacity>\n                    </View>\n                  ))}\n                </View>\n              ))}\n            </View>\n          </ScrollView>\n        </>\n      ) : (\n        <View style={styles.character__title}>\n          <View style={styles.title__bar} />\n          <Text style={styles.character__name}>No Character</Text>\n          <View style={styles.title__bar} />\n        </View>\n      )}\n      <TouchableOpacity\n        style={styles.addIcon__block}\n        onPress={() => setAddNoteModalView(!addNoteModalView)}\n      >\n        <Image source={addBlueIcon} style={styles.addIcon} />\n      </TouchableOpacity>\n      <Overlay\n        name=\"add note modal\"\n        isVisible={addNoteModalView}\n        overlayStyle={styles.noteModal}\n        backdropStyle={styles.noteModal__background}\n        animationType=\"fade\"\n        onBackdropPress={() => {\n          setAddNoteModalView(!addNoteModalView);\n          setNewNoteName('');\n        }}\n      >\n        <View style={styles.noteModal__block}>\n          <Text style={styles.noteModal__title}>Add new note</Text>\n          <TextInput\n            style={styles.noteModal__text}\n            placeholder=\"Note Name\"\n            maxLength={20}\n            autoCorrect={false}\n            value={newNoteName}\n            onChangeText={(text) => setNewNoteName(text)}\n          />\n          <Button\n            buttonStyle={styles.noteModal__button}\n            title=\"Create Note\"\n            onPress={() => {\n              setNewNoteName('');\n              setAddNoteModalView(!addNoteModalView);\n              createNote(character, newNoteName, updateCharacter, dispatch);\n            }}\n          />\n        </View>\n      </Overlay>\n      <Overlay\n        name=\"edit note modal\"\n        isVisible={editNoteModalView}\n        overlayStyle={styles.noteModal}\n        animationType=\"fade\"\n        onBackdropPress={() => {\n          setEditNoteModalView(!editNoteModalView);\n          setEditNoteModalValue('');\n          setNoteKey('');\n        }}\n      >\n        <View style={styles.noteModal__block}>\n          <Text style={styles.noteModal__title}>Edit Note</Text>\n          <TextInput\n            style={styles.noteModal__text}\n            placeholder=\"Note Name\"\n            multiline\n            maxLength={30}\n            autoCorrect={false}\n            value={editNoteModalValue}\n            onChangeText={(text) => setEditNoteModalValue(text)}\n          />\n          <View style={styles.editNoteModal__buttons}>\n            <Button\n              buttonStyle={styles.editNoteModal__editButton}\n              title=\"Edit\"\n              onPress={() => {\n                editNote(\n                  character, noteKey, editNoteModalValue, updateCharacter, dispatch,\n                );\n                setEditNoteModalValue('');\n                setNoteKey('');\n                setEditNoteModalView(!editNoteModalView);\n              }}\n            />\n            <Button\n              buttonStyle={styles.editNoteModal__deleteButton}\n              title=\"Delete\"\n              onPress={() => {\n                setEditNoteModalView(!editNoteModalView);\n                setDeleteNoteModalView(!deleteNoteModalView);\n              }}\n            />\n          </View>\n        </View>\n      </Overlay>\n      <Overlay\n        name=\"delete note modal\"\n        isVisible={deleteNoteModalView}\n        overlayStyle={styles.noteModal}\n        animationType=\"fade\"\n        fullScreen\n        onBackdropPress={() => {\n          setDeleteNoteModalView(!deleteNoteModalView);\n        }}\n      >\n        <View style={styles.deleteNoteModal__block}>\n          <Text style={styles.deleteNoteModal__text}>\n            You are about to delete\n          </Text>\n          <Text style={styles.deleteNoteModal__note__name}>\n            {editNoteModalValue}\n          </Text>\n          <Text style={styles.deleteNoteModal__text}>\n            and all the entries it contains.\n          </Text>\n          <View style={styles.editModal__textBlock}>\n            <Text style={styles.deleteNoteModal__warningText}>\n              This action is irreversible.\n            </Text>\n          </View>\n          <Button\n            title=\"Delete\"\n            buttonStyle={styles.editNoteModal__deleteButton}\n            onPress={() => {\n              deleteNote(character, noteKey, updateCharacter, dispatch);\n              setNoteKey('');\n              setEditNoteModalValue('');\n              setDeleteNoteModalView(!deleteNoteModalView);\n            }}\n          />\n        </View>\n      </Overlay>\n      <Overlay\n        name=\"add entry modal\"\n        isVisible={addEntryModalView}\n        overlayStyle={styles.entryModal}\n        backdropStyle={styles.noteModal__background}\n        animationType=\"fade\"\n        onBackdropPress={() => {\n          setAddEntryModalView(!addEntryModalView);\n          setAddEntryModalValue('');\n        }}\n      >\n        <View style={styles.noteModal__block}>\n          <Text style={styles.entryModal__title}>Add new entry</Text>\n          <ScrollView style={{ width: '90%' }}>\n            <TextInput\n              style={styles.entryModal__text}\n              placeholder=\"Entry\"\n              multiline\n              autoCorrect={false}\n              value={addEntryModalValue}\n              onChangeText={(text) => setAddEntryModalValue(text)}\n            />\n          </ScrollView>\n          <Button\n            buttonStyle={styles.noteModal__button}\n            title=\"Create Entry\"\n            onPress={() => {\n              createEntry(character, noteKey, addEntryModalValue, updateCharacter, dispatch);\n              setAddEntryModalValue('');\n              setAddEntryModalView(!addEntryModalView);\n            }}\n          />\n        </View>\n      </Overlay>\n      <Overlay\n        name=\"edit entry modal\"\n        isVisible={editEntryModalView}\n        overlayStyle={styles.entryModal}\n        backdropStyle={styles.noteModal__background}\n        animationType=\"fade\"\n        onBackdropPress={() => {\n          setEditEntryModalView(!editEntryModalView);\n          setEditEntryModalValue('');\n        }}\n      >\n        <View style={styles.noteModal__block}>\n          <Text style={styles.entryModal__title}>Edit entry</Text>\n          <ScrollView style={{ width: '90%' }}>\n            <TextInput\n              style={styles.entryModal__text}\n              placeholder=\"Entry\"\n              multiline\n              autoCorrect={false}\n              value={editEntryModalValue}\n              onChangeText={(text) => setEditEntryModalValue(text)}\n            />\n          </ScrollView>\n          <Button\n            buttonStyle={styles.noteModal__button}\n            title=\"Edit Entry\"\n            onPress={() => {\n              editEntry(character, noteKey, entryKey, addEntryModalValue, updateCharacter, dispatch);\n              setEditEntryModalValue('');\n              setEditEntryModalView(!addEntryModalView);\n            }}\n          />\n        </View>\n      </Overlay>\n      <NavigationBar navigation={navigation} userId={userId} dispatch={dispatch} />\n    </ImageBackground>\n  );\n}\n\nfunction mapStateToProps({ charactersReducer, usersReducer }) {\n  return {\n    characterItem: charactersReducer.characterItem,\n    userId: usersReducer.userId,\n  };\n}\n\nexport default connect(mapStateToProps)(CharacterNotes);\n"]},"metadata":{},"sourceType":"module"}