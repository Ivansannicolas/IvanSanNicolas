{"ast":null,"code":"import _defineProperty from \"@babel/runtime/helpers/defineProperty\";\n\nfunction ownKeys(object, enumerableOnly) { var keys = Object.keys(object); if (Object.getOwnPropertySymbols) { var symbols = Object.getOwnPropertySymbols(object); if (enumerableOnly) symbols = symbols.filter(function (sym) { return Object.getOwnPropertyDescriptor(object, sym).enumerable; }); keys.push.apply(keys, symbols); } return keys; }\n\nfunction _objectSpread(target) { for (var i = 1; i < arguments.length; i++) { var source = arguments[i] != null ? arguments[i] : {}; if (i % 2) { ownKeys(Object(source), true).forEach(function (key) { _defineProperty(target, key, source[key]); }); } else if (Object.getOwnPropertyDescriptors) { Object.defineProperties(target, Object.getOwnPropertyDescriptors(source)); } else { ownKeys(Object(source)).forEach(function (key) { Object.defineProperty(target, key, Object.getOwnPropertyDescriptor(source, key)); }); } } return target; }\n\nimport Alert from \"react-native-web/dist/exports/Alert\";\nimport { updateCharacter } from \"../../redux/actions/characterActions\";\nexport var setVisibility = {\n  sheetVisibility: 'sheetVisibility',\n  inventoryVisibility: 'inventoryVisibility',\n  notesVisibility: 'notesVisibility'\n};\nexport function visibilityAlert(setId) {\n  Alert.alert('', \"The \" + setId + \" visibility was changed\", [{\n    text: 'OK',\n    onPress: function onPress() {\n      return console.log('OK Pressed');\n    }\n  }], {\n    cancelable: false\n  });\n}\nexport function changeSetVisibility(actualCharacter, setCharacterFunction, setId, actualSetVisibility, dispatch) {\n  var updatedcharacter = _objectSpread({}, actualCharacter);\n\n  var characterId = updatedcharacter._id;\n\n  switch (setId) {\n    case actualSetVisibility.inventoryVisibility:\n      if (updatedcharacter.inventory.public) {\n        updatedcharacter.inventory.public = false;\n      } else {\n        updatedcharacter.inventory.public = true;\n      }\n\n      break;\n\n    case actualSetVisibility.sheetVisibility:\n      if (updatedcharacter.sheet.public) {\n        updatedcharacter.sheet.public = false;\n      } else {\n        updatedcharacter.sheet.public = true;\n      }\n\n      break;\n\n    case actualSetVisibility.notesVisibility:\n      if (updatedcharacter.notes.public) {\n        updatedcharacter.notes.public = false;\n      } else {\n        updatedcharacter.notes.public = true;\n      }\n\n      break;\n\n    default:\n      break;\n  }\n\n  setCharacterFunction(updatedcharacter);\n  dispatch(updateCharacter(characterId, updatedcharacter));\n  visibilityAlert(setId);\n}\nexport function displayEditModal(setModalVisibility, modalVisibility) {\n  setModalVisibility(!modalVisibility);\n}\nexport var editCharacterMethods = {\n  editCharacterName: function editCharacterName(actualCharacter, text, setCharacterFunction, dispatch) {\n    console.log('editing name');\n\n    var updatedCharacter = _objectSpread({}, actualCharacter);\n\n    var characterId = updatedCharacter._id;\n    updatedCharacter.name = text;\n    setCharacterFunction(text);\n    dispatch(updateCharacter(characterId, updatedCharacter));\n  },\n  editCharacterGame: function editCharacterGame(actualCharacter, text, setCharacterFunction, dispatch) {\n    console.log('editing game');\n\n    var updatedCharacter = _objectSpread({}, actualCharacter);\n\n    var characterId = updatedCharacter._id;\n    updatedCharacter.game = text;\n    setCharacterFunction(text);\n    dispatch(updateCharacter(characterId, updatedCharacter));\n  },\n  editCharacterRace: function editCharacterRace(actualCharacter, text, setCharacterFunction, dispatch) {\n    console.log('editing race');\n\n    var updatedCharacter = _objectSpread({}, actualCharacter);\n\n    var characterId = updatedCharacter._id;\n    updatedCharacter.race = text;\n    setCharacterFunction(text);\n    dispatch(updateCharacter(characterId, updatedCharacter));\n  },\n  editCharacterClass: function editCharacterClass(actualCharacter, text, setCharacterFunction, dispatch) {\n    console.log('editing class');\n\n    var updatedCharacter = _objectSpread({}, actualCharacter);\n\n    var characterId = updatedCharacter._id;\n    updatedCharacter.characterClass = text;\n    setCharacterFunction(text);\n    dispatch(updateCharacter(characterId, updatedCharacter));\n  },\n  editCharacterLvl: function editCharacterLvl(actualCharacter, text, setCharacterFunction, dispatch) {\n    console.log('editing level');\n\n    var updatedCharacter = _objectSpread({}, actualCharacter);\n\n    var characterId = updatedCharacter._id;\n    updatedCharacter.lvl = text;\n    setCharacterFunction(text);\n    dispatch(updateCharacter(characterId, updatedCharacter));\n  },\n  editName: 'Edit Name',\n  editGame: 'Edit Game',\n  editRace: 'Edit Race',\n  editClass: 'Edit Class',\n  editLvl: 'Edit Level'\n};\nexport function editCharacter(editType, actualCharacter, actualTextValue, characterMethods, setEditModalView, editModalView, setCharacterName, setCharacterGame, setCharacterRace, setCharacterClass, setCharacterLvl, dispatch) {\n  switch (editType) {\n    case characterMethods.editName:\n      characterMethods.editCharacterName(actualCharacter, actualTextValue, setCharacterName, dispatch);\n      break;\n\n    case characterMethods.editGame:\n      characterMethods.editCharacterGame(actualCharacter, actualTextValue, setCharacterGame, dispatch);\n      break;\n\n    case characterMethods.editRace:\n      characterMethods.editCharacterRace(actualCharacter, actualTextValue, setCharacterRace, dispatch);\n      break;\n\n    case characterMethods.editClass:\n      characterMethods.editCharacterClass(actualCharacter, actualTextValue, setCharacterClass, dispatch);\n      break;\n\n    case characterMethods.editLvl:\n      characterMethods.editCharacterLvl(actualCharacter, actualTextValue, setCharacterLvl, dispatch);\n      break;\n\n    default:\n      break;\n  }\n\n  displayEditModal(setEditModalView, editModalView);\n}","map":{"version":3,"sources":["/Users/ivansan/Documents/Programming-repos/absalom/frontend/src/components/CharacterDetail/CharacterDetailFunctions.js"],"names":["updateCharacter","setVisibility","sheetVisibility","inventoryVisibility","notesVisibility","visibilityAlert","setId","Alert","alert","text","onPress","console","log","cancelable","changeSetVisibility","actualCharacter","setCharacterFunction","actualSetVisibility","dispatch","updatedcharacter","characterId","_id","inventory","public","sheet","notes","displayEditModal","setModalVisibility","modalVisibility","editCharacterMethods","editCharacterName","updatedCharacter","name","editCharacterGame","game","editCharacterRace","race","editCharacterClass","characterClass","editCharacterLvl","lvl","editName","editGame","editRace","editClass","editLvl","editCharacter","editType","actualTextValue","characterMethods","setEditModalView","editModalView","setCharacterName","setCharacterGame","setCharacterRace","setCharacterClass","setCharacterLvl"],"mappings":"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","sourcesContent":["import { Alert } from 'react-native';\nimport { updateCharacter } from '../../redux/actions/characterActions';\n\nexport const setVisibility = {\n  sheetVisibility: 'sheetVisibility',\n  inventoryVisibility: 'inventoryVisibility',\n  notesVisibility: 'notesVisibility',\n};\n\nexport function visibilityAlert(setId) {\n  Alert.alert(\n    '',\n    `The ${setId} visibility was changed`,\n    [\n      { text: 'OK', onPress: () => console.log('OK Pressed') },\n    ],\n    { cancelable: false },\n  );\n}\n\nexport function changeSetVisibility(\n  actualCharacter, setCharacterFunction, setId, actualSetVisibility, dispatch,\n) {\n  const updatedcharacter = { ...actualCharacter };\n  const characterId = updatedcharacter._id;\n  switch (setId) {\n    case actualSetVisibility.inventoryVisibility:\n      if (updatedcharacter.inventory.public) {\n        updatedcharacter.inventory.public = false;\n      } else {\n        updatedcharacter.inventory.public = true;\n      }\n      break;\n    case actualSetVisibility.sheetVisibility:\n      if (updatedcharacter.sheet.public) {\n        updatedcharacter.sheet.public = false;\n      } else {\n        updatedcharacter.sheet.public = true;\n      }\n      break;\n    case actualSetVisibility.notesVisibility:\n      if (updatedcharacter.notes.public) {\n        updatedcharacter.notes.public = false;\n      } else {\n        updatedcharacter.notes.public = true;\n      }\n      break;\n\n    default:\n      break;\n  }\n  setCharacterFunction(updatedcharacter);\n  dispatch(updateCharacter(characterId, updatedcharacter));\n  visibilityAlert(setId);\n}\n\nexport function displayEditModal(setModalVisibility, modalVisibility) {\n  setModalVisibility(!modalVisibility);\n}\n\nexport const editCharacterMethods = {\n  editCharacterName(actualCharacter, text, setCharacterFunction, dispatch) {\n    console.log('editing name');\n    const updatedCharacter = { ...actualCharacter };\n    const characterId = updatedCharacter._id;\n\n    updatedCharacter.name = text;\n\n    setCharacterFunction(text);\n    dispatch(updateCharacter(characterId, updatedCharacter));\n  },\n  editCharacterGame(actualCharacter, text, setCharacterFunction, dispatch) {\n    console.log('editing game');\n    const updatedCharacter = { ...actualCharacter };\n    const characterId = updatedCharacter._id;\n\n    updatedCharacter.game = text;\n\n    setCharacterFunction(text);\n    dispatch(updateCharacter(characterId, updatedCharacter));\n  },\n  editCharacterRace(actualCharacter, text, setCharacterFunction, dispatch) {\n    console.log('editing race');\n    const updatedCharacter = { ...actualCharacter };\n    const characterId = updatedCharacter._id;\n\n    updatedCharacter.race = text;\n\n    setCharacterFunction(text);\n    dispatch(updateCharacter(characterId, updatedCharacter));\n  },\n  editCharacterClass(actualCharacter, text, setCharacterFunction, dispatch) {\n    console.log('editing class');\n    const updatedCharacter = { ...actualCharacter };\n    const characterId = updatedCharacter._id;\n\n    updatedCharacter.characterClass = text;\n\n    setCharacterFunction(text);\n    dispatch(updateCharacter(characterId, updatedCharacter));\n  },\n  editCharacterLvl(actualCharacter, text, setCharacterFunction, dispatch) {\n    console.log('editing level');\n    const updatedCharacter = { ...actualCharacter };\n    const characterId = updatedCharacter._id;\n\n    updatedCharacter.lvl = text;\n\n    setCharacterFunction(text);\n    dispatch(updateCharacter(characterId, updatedCharacter));\n  },\n  editName: 'Edit Name',\n  editGame: 'Edit Game',\n  editRace: 'Edit Race',\n  editClass: 'Edit Class',\n  editLvl: 'Edit Level',\n\n};\n\nexport function editCharacter(\n  editType, actualCharacter, actualTextValue, characterMethods, setEditModalView, editModalView,\n  setCharacterName, setCharacterGame, setCharacterRace, setCharacterClass, setCharacterLvl,\n  dispatch,\n) {\n  switch (editType) {\n    case characterMethods.editName:\n      characterMethods.editCharacterName(actualCharacter, actualTextValue,\n        setCharacterName, dispatch);\n      break;\n    case characterMethods.editGame:\n      characterMethods.editCharacterGame(actualCharacter, actualTextValue,\n        setCharacterGame, dispatch);\n      break;\n    case characterMethods.editRace:\n      characterMethods.editCharacterRace(actualCharacter, actualTextValue,\n        setCharacterRace, dispatch);\n      break;\n    case characterMethods.editClass:\n      characterMethods.editCharacterClass(actualCharacter, actualTextValue,\n        setCharacterClass, dispatch);\n      break;\n    case characterMethods.editLvl:\n      characterMethods.editCharacterLvl(actualCharacter, actualTextValue,\n        setCharacterLvl, dispatch);\n      break;\n    default:\n      break;\n  }\n  displayEditModal(setEditModalView, editModalView);\n}\n\n/*\n  const editCharacterMethods = {\n    editCharacterName(actualCharacter, text, setCharacterFunction) {\n      const updatedCharacter = { ...actualCharacter };\n      const characterId = updatedCharacter._id;\n\n      updatedCharacter.name = text;\n\n      setCharacter(updatedCharacter);\n      setCharacterFunction(text);\n      dispatch(updateCharacter(characterId, updatedCharacter));\n    },\n    editCharacterGame(actualCharacter, text, setCharacterFunction) {\n      console.log(actualCharacter);\n      const updatedCharacter = { ...actualCharacter };\n      const characterId = updatedCharacter._id;\n\n      updatedCharacter.game = text;\n\n      setCharacter(updatedCharacter);\n      setCharacterFunction(text);\n      dispatch(updateCharacter(characterId, updatedCharacter));\n    },\n    editCharacterRace(actualCharacter, text, setCharacterFunction) {\n      const updatedCharacter = { ...actualCharacter };\n      const characterId = updatedCharacter._id;\n\n      updatedCharacter.race = text;\n\n      setCharacter(updatedCharacter);\n      setCharacterFunction(text);\n      dispatch(updateCharacter(characterId, updatedCharacter));\n    },\n    editCharacterClass(actualCharacter, text, setCharacterFunction) {\n      const updatedCharacter = { ...actualCharacter };\n      const characterId = updatedCharacter._id;\n\n      updatedCharacter.characterClass = text;\n\n      setCharacter(updatedCharacter);\n      setCharacterFunction(text);\n      dispatch(updateCharacter(characterId, updatedCharacter));\n    },\n    editCharacterLvl(actualCharacter, text, setCharacterFunction) {\n      const updatedCharacter = { ...actualCharacter };\n      const characterId = updatedCharacter._id;\n\n      updatedCharacter.lvl = text;\n\n      setCharacter(updatedCharacter);\n      setCharacterFunction(text);\n      dispatch(updateCharacter(characterId, updatedCharacter));\n    },\n    editName: 'Edit Name',\n    editGame: 'Edit Game',\n    editRace: 'Edit Race',\n    editClass: 'Edit Class',\n    editLvl: 'Edit Level',\n\n  };\n\n  function editCharacter(editType, actualCharacter, actualTextValue, characterMethods) {\n    switch (editType) {\n      case characterMethods.editName:\n        characterMethods.editCharacterName(actualCharacter, actualTextValue, setCharacterName);\n        break;\n      case characterMethods.editGame:\n        characterMethods.editCharacterGame(actualCharacter, actualTextValue, setCharacterGame);\n        break;\n      case characterMethods.editRace:\n        characterMethods.editCharacterRace(actualCharacter, actualTextValue, setCharacterRace);\n        break;\n      case characterMethods.editClass:\n        characterMethods.editCharacterClass(actualCharacter, actualTextValue, setCharacterClass);\n        break;\n      case characterMethods.editLvl:\n        characterMethods.editCharacterLvl(actualCharacter, actualTextValue, setCharacterLvl);\n        break;\n      default:\n        break;\n    }\n    displayEditModal(setEditModalView, editModalView);\n  }\n\n*/\n"]},"metadata":{},"sourceType":"module"}