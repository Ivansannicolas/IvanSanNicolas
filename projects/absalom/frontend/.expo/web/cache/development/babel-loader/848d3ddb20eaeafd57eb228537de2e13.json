{"ast":null,"code":"import _defineProperty from \"@babel/runtime/helpers/defineProperty\";\n\nfunction ownKeys(object, enumerableOnly) { var keys = Object.keys(object); if (Object.getOwnPropertySymbols) { var symbols = Object.getOwnPropertySymbols(object); if (enumerableOnly) symbols = symbols.filter(function (sym) { return Object.getOwnPropertyDescriptor(object, sym).enumerable; }); keys.push.apply(keys, symbols); } return keys; }\n\nfunction _objectSpread(target) { for (var i = 1; i < arguments.length; i++) { var source = arguments[i] != null ? arguments[i] : {}; if (i % 2) { ownKeys(Object(source), true).forEach(function (key) { _defineProperty(target, key, source[key]); }); } else if (Object.getOwnPropertyDescriptors) { Object.defineProperties(target, Object.getOwnPropertyDescriptors(source)); } else { ownKeys(Object(source)).forEach(function (key) { Object.defineProperty(target, key, Object.getOwnPropertyDescriptor(source, key)); }); } } return target; }\n\nimport { updateCharacter, deleteCharacter } from \"../../redux/actions/characterActions\";\nimport { updateUser } from \"../../redux/actions/userActions\";\nexport var setVisibility = {\n  sheetVisibility: 'Sheet visibility',\n  inventoryVisibility: 'Inventory visibility',\n  notesVisibility: 'Notes visibility'\n};\nexport function changeSetVisibility(actualCharacter, setCharacterFunction, setId, actualSetVisibility, dispatch) {\n  var updatedcharacter = _objectSpread({}, actualCharacter);\n\n  var characterId = updatedcharacter._id;\n\n  switch (setId) {\n    case actualSetVisibility.inventoryVisibility:\n      if (updatedcharacter.inventory.public) {\n        updatedcharacter.inventory.public = false;\n      } else {\n        updatedcharacter.inventory.public = true;\n      }\n\n      break;\n\n    case actualSetVisibility.sheetVisibility:\n      if (updatedcharacter.sheet.public) {\n        updatedcharacter.sheet.public = false;\n      } else {\n        updatedcharacter.sheet.public = true;\n      }\n\n      break;\n\n    case actualSetVisibility.notesVisibility:\n      if (updatedcharacter.notes.public) {\n        updatedcharacter.notes.public = false;\n      } else {\n        updatedcharacter.notes.public = true;\n      }\n\n      break;\n\n    default:\n      break;\n  }\n\n  setCharacterFunction(updatedcharacter);\n  dispatch(updateCharacter(characterId, updatedcharacter));\n}\nexport function displayDeleteCharacterModal(setDeleteCharacterModalView, deleteCharacterModalView) {\n  setDeleteCharacterModalView(!deleteCharacterModalView);\n}\nexport function displayEditModal(setModalVisibility, modalVisibility) {\n  setModalVisibility(!modalVisibility);\n}\nexport var editCharacterMethods = {\n  editCharacterName: function editCharacterName(actualCharacter, text, setCharacterFunction, dispatch) {\n    var updatedCharacter = _objectSpread({}, actualCharacter);\n\n    var characterId = updatedCharacter._id;\n    updatedCharacter.name = text;\n    setCharacterFunction(text);\n    dispatch(updateCharacter(characterId, updatedCharacter));\n  },\n  editCharacterGame: function editCharacterGame(actualCharacter, text, setCharacterFunction, dispatch) {\n    var updatedCharacter = _objectSpread({}, actualCharacter);\n\n    var characterId = updatedCharacter._id;\n    updatedCharacter.game = text;\n    setCharacterFunction(text);\n    dispatch(updateCharacter(characterId, updatedCharacter));\n  },\n  editCharacterRace: function editCharacterRace(actualCharacter, text, setCharacterFunction, dispatch) {\n    var updatedCharacter = _objectSpread({}, actualCharacter);\n\n    var characterId = updatedCharacter._id;\n    updatedCharacter.race = text;\n    setCharacterFunction(text);\n    dispatch(updateCharacter(characterId, updatedCharacter));\n  },\n  editCharacterClass: function editCharacterClass(actualCharacter, text, setCharacterFunction, dispatch) {\n    var updatedCharacter = _objectSpread({}, actualCharacter);\n\n    var characterId = updatedCharacter._id;\n    updatedCharacter.characterClass = text;\n    setCharacterFunction(text);\n    dispatch(updateCharacter(characterId, updatedCharacter));\n  },\n  editCharacterLvl: function editCharacterLvl(actualCharacter, text, setCharacterFunction, dispatch) {\n    var updatedCharacter = _objectSpread({}, actualCharacter);\n\n    var characterId = updatedCharacter._id;\n    updatedCharacter.lvl = text;\n    setCharacterFunction(text);\n    dispatch(updateCharacter(characterId, updatedCharacter));\n  },\n  editName: 'Edit Name',\n  editGame: 'Edit Game',\n  editRace: 'Edit Race',\n  editClass: 'Edit Class',\n  editLvl: 'Edit Level'\n};\nexport function editCharacter(editType, actualCharacter, actualTextValue, characterMethods, setEditModalView, editModalView, setCharacterName, setCharacterGame, setCharacterRace, setCharacterClass, setCharacterLvl, dispatch) {\n  switch (editType) {\n    case characterMethods.editName:\n      characterMethods.editCharacterName(actualCharacter, actualTextValue, setCharacterName, dispatch);\n      break;\n\n    case characterMethods.editGame:\n      characterMethods.editCharacterGame(actualCharacter, actualTextValue, setCharacterGame, dispatch);\n      break;\n\n    case characterMethods.editRace:\n      characterMethods.editCharacterRace(actualCharacter, actualTextValue, setCharacterRace, dispatch);\n      break;\n\n    case characterMethods.editClass:\n      characterMethods.editCharacterClass(actualCharacter, actualTextValue, setCharacterClass, dispatch);\n      break;\n\n    case characterMethods.editLvl:\n      characterMethods.editCharacterLvl(actualCharacter, actualTextValue, setCharacterLvl, dispatch);\n      break;\n\n    default:\n      break;\n  }\n\n  displayEditModal(setEditModalView, editModalView);\n}\nexport function removeCharacter(dispatch, characterId, user) {\n  debugger;\n\n  var updatedUser = _objectSpread({}, user);\n\n  updatedUser.characters = user.characters.filter(function (character) {\n    return character._id !== characterId;\n  });\n  var userId = updatedUser._id;\n  dispatch(deleteCharacter(characterId));\n  dispatch(updateUser(userId, updatedUser));\n}","map":{"version":3,"sources":["/Users/ivansan/Documents/Programming-repos/absalom/frontend/src/components/CharacterDetail/CharacterDetailFunctions.js"],"names":["updateCharacter","deleteCharacter","updateUser","setVisibility","sheetVisibility","inventoryVisibility","notesVisibility","changeSetVisibility","actualCharacter","setCharacterFunction","setId","actualSetVisibility","dispatch","updatedcharacter","characterId","_id","inventory","public","sheet","notes","displayDeleteCharacterModal","setDeleteCharacterModalView","deleteCharacterModalView","displayEditModal","setModalVisibility","modalVisibility","editCharacterMethods","editCharacterName","text","updatedCharacter","name","editCharacterGame","game","editCharacterRace","race","editCharacterClass","characterClass","editCharacterLvl","lvl","editName","editGame","editRace","editClass","editLvl","editCharacter","editType","actualTextValue","characterMethods","setEditModalView","editModalView","setCharacterName","setCharacterGame","setCharacterRace","setCharacterClass","setCharacterLvl","removeCharacter","user","updatedUser","characters","filter","character","userId"],"mappings":";;;;;;AAAA,SAASA,eAAT,EAA0BC,eAA1B;AACA,SAASC,UAAT;AAEA,OAAO,IAAMC,aAAa,GAAG;AAC3BC,EAAAA,eAAe,EAAE,kBADU;AAE3BC,EAAAA,mBAAmB,EAAE,sBAFM;AAG3BC,EAAAA,eAAe,EAAE;AAHU,CAAtB;AAMP,OAAO,SAASC,mBAAT,CACLC,eADK,EACYC,oBADZ,EACkCC,KADlC,EACyCC,mBADzC,EAC8DC,QAD9D,EAEL;AACA,MAAMC,gBAAgB,qBAAQL,eAAR,CAAtB;;AACA,MAAMM,WAAW,GAAGD,gBAAgB,CAACE,GAArC;;AACA,UAAQL,KAAR;AACE,SAAKC,mBAAmB,CAACN,mBAAzB;AACE,UAAIQ,gBAAgB,CAACG,SAAjB,CAA2BC,MAA/B,EAAuC;AACrCJ,QAAAA,gBAAgB,CAACG,SAAjB,CAA2BC,MAA3B,GAAoC,KAApC;AACD,OAFD,MAEO;AACLJ,QAAAA,gBAAgB,CAACG,SAAjB,CAA2BC,MAA3B,GAAoC,IAApC;AACD;;AACD;;AACF,SAAKN,mBAAmB,CAACP,eAAzB;AACE,UAAIS,gBAAgB,CAACK,KAAjB,CAAuBD,MAA3B,EAAmC;AACjCJ,QAAAA,gBAAgB,CAACK,KAAjB,CAAuBD,MAAvB,GAAgC,KAAhC;AACD,OAFD,MAEO;AACLJ,QAAAA,gBAAgB,CAACK,KAAjB,CAAuBD,MAAvB,GAAgC,IAAhC;AACD;;AACD;;AACF,SAAKN,mBAAmB,CAACL,eAAzB;AACE,UAAIO,gBAAgB,CAACM,KAAjB,CAAuBF,MAA3B,EAAmC;AACjCJ,QAAAA,gBAAgB,CAACM,KAAjB,CAAuBF,MAAvB,GAAgC,KAAhC;AACD,OAFD,MAEO;AACLJ,QAAAA,gBAAgB,CAACM,KAAjB,CAAuBF,MAAvB,GAAgC,IAAhC;AACD;;AACD;;AAEF;AACE;AAxBJ;;AA0BAR,EAAAA,oBAAoB,CAACI,gBAAD,CAApB;AACAD,EAAAA,QAAQ,CAACZ,eAAe,CAACc,WAAD,EAAcD,gBAAd,CAAhB,CAAR;AACD;AAED,OAAO,SAASO,2BAAT,CAAqCC,2BAArC,EAAkEC,wBAAlE,EAA4F;AACjGD,EAAAA,2BAA2B,CAAC,CAACC,wBAAF,CAA3B;AACD;AAED,OAAO,SAASC,gBAAT,CAA0BC,kBAA1B,EAA8CC,eAA9C,EAA+D;AACpED,EAAAA,kBAAkB,CAAC,CAACC,eAAF,CAAlB;AACD;AAED,OAAO,IAAMC,oBAAoB,GAAG;AAClCC,EAAAA,iBADkC,6BAChBnB,eADgB,EACCoB,IADD,EACOnB,oBADP,EAC6BG,QAD7B,EACuC;AACvE,QAAMiB,gBAAgB,qBAAQrB,eAAR,CAAtB;;AACA,QAAMM,WAAW,GAAGe,gBAAgB,CAACd,GAArC;AAEAc,IAAAA,gBAAgB,CAACC,IAAjB,GAAwBF,IAAxB;AAEAnB,IAAAA,oBAAoB,CAACmB,IAAD,CAApB;AACAhB,IAAAA,QAAQ,CAACZ,eAAe,CAACc,WAAD,EAAce,gBAAd,CAAhB,CAAR;AACD,GATiC;AAUlCE,EAAAA,iBAVkC,6BAUhBvB,eAVgB,EAUCoB,IAVD,EAUOnB,oBAVP,EAU6BG,QAV7B,EAUuC;AACvE,QAAMiB,gBAAgB,qBAAQrB,eAAR,CAAtB;;AACA,QAAMM,WAAW,GAAGe,gBAAgB,CAACd,GAArC;AAEAc,IAAAA,gBAAgB,CAACG,IAAjB,GAAwBJ,IAAxB;AAEAnB,IAAAA,oBAAoB,CAACmB,IAAD,CAApB;AACAhB,IAAAA,QAAQ,CAACZ,eAAe,CAACc,WAAD,EAAce,gBAAd,CAAhB,CAAR;AACD,GAlBiC;AAmBlCI,EAAAA,iBAnBkC,6BAmBhBzB,eAnBgB,EAmBCoB,IAnBD,EAmBOnB,oBAnBP,EAmB6BG,QAnB7B,EAmBuC;AACvE,QAAMiB,gBAAgB,qBAAQrB,eAAR,CAAtB;;AACA,QAAMM,WAAW,GAAGe,gBAAgB,CAACd,GAArC;AAEAc,IAAAA,gBAAgB,CAACK,IAAjB,GAAwBN,IAAxB;AAEAnB,IAAAA,oBAAoB,CAACmB,IAAD,CAApB;AACAhB,IAAAA,QAAQ,CAACZ,eAAe,CAACc,WAAD,EAAce,gBAAd,CAAhB,CAAR;AACD,GA3BiC;AA4BlCM,EAAAA,kBA5BkC,8BA4Bf3B,eA5Be,EA4BEoB,IA5BF,EA4BQnB,oBA5BR,EA4B8BG,QA5B9B,EA4BwC;AACxE,QAAMiB,gBAAgB,qBAAQrB,eAAR,CAAtB;;AACA,QAAMM,WAAW,GAAGe,gBAAgB,CAACd,GAArC;AAEAc,IAAAA,gBAAgB,CAACO,cAAjB,GAAkCR,IAAlC;AAEAnB,IAAAA,oBAAoB,CAACmB,IAAD,CAApB;AACAhB,IAAAA,QAAQ,CAACZ,eAAe,CAACc,WAAD,EAAce,gBAAd,CAAhB,CAAR;AACD,GApCiC;AAqClCQ,EAAAA,gBArCkC,4BAqCjB7B,eArCiB,EAqCAoB,IArCA,EAqCMnB,oBArCN,EAqC4BG,QArC5B,EAqCsC;AACtE,QAAMiB,gBAAgB,qBAAQrB,eAAR,CAAtB;;AACA,QAAMM,WAAW,GAAGe,gBAAgB,CAACd,GAArC;AAEAc,IAAAA,gBAAgB,CAACS,GAAjB,GAAuBV,IAAvB;AAEAnB,IAAAA,oBAAoB,CAACmB,IAAD,CAApB;AACAhB,IAAAA,QAAQ,CAACZ,eAAe,CAACc,WAAD,EAAce,gBAAd,CAAhB,CAAR;AACD,GA7CiC;AA8ClCU,EAAAA,QAAQ,EAAE,WA9CwB;AA+ClCC,EAAAA,QAAQ,EAAE,WA/CwB;AAgDlCC,EAAAA,QAAQ,EAAE,WAhDwB;AAiDlCC,EAAAA,SAAS,EAAE,YAjDuB;AAkDlCC,EAAAA,OAAO,EAAE;AAlDyB,CAA7B;AAsDP,OAAO,SAASC,aAAT,CACLC,QADK,EACKrC,eADL,EACsBsC,eADtB,EACuCC,gBADvC,EACyDC,gBADzD,EAC2EC,aAD3E,EAELC,gBAFK,EAEaC,gBAFb,EAE+BC,gBAF/B,EAEiDC,iBAFjD,EAEoEC,eAFpE,EAGL1C,QAHK,EAIL;AACA,UAAQiC,QAAR;AACE,SAAKE,gBAAgB,CAACR,QAAtB;AACEQ,MAAAA,gBAAgB,CAACpB,iBAAjB,CAAmCnB,eAAnC,EAAoDsC,eAApD,EACEI,gBADF,EACoBtC,QADpB;AAEA;;AACF,SAAKmC,gBAAgB,CAACP,QAAtB;AACEO,MAAAA,gBAAgB,CAAChB,iBAAjB,CAAmCvB,eAAnC,EAAoDsC,eAApD,EACEK,gBADF,EACoBvC,QADpB;AAEA;;AACF,SAAKmC,gBAAgB,CAACN,QAAtB;AACEM,MAAAA,gBAAgB,CAACd,iBAAjB,CAAmCzB,eAAnC,EAAoDsC,eAApD,EACEM,gBADF,EACoBxC,QADpB;AAEA;;AACF,SAAKmC,gBAAgB,CAACL,SAAtB;AACEK,MAAAA,gBAAgB,CAACZ,kBAAjB,CAAoC3B,eAApC,EAAqDsC,eAArD,EACEO,iBADF,EACqBzC,QADrB;AAEA;;AACF,SAAKmC,gBAAgB,CAACJ,OAAtB;AACEI,MAAAA,gBAAgB,CAACV,gBAAjB,CAAkC7B,eAAlC,EAAmDsC,eAAnD,EACEQ,eADF,EACmB1C,QADnB;AAEA;;AACF;AACE;AAtBJ;;AAwBAW,EAAAA,gBAAgB,CAACyB,gBAAD,EAAmBC,aAAnB,CAAhB;AACD;AAED,OAAO,SAASM,eAAT,CAAyB3C,QAAzB,EAAmCE,WAAnC,EAAgD0C,IAAhD,EAAsD;AAC3D;;AACA,MAAMC,WAAW,qBAAQD,IAAR,CAAjB;;AACAC,EAAAA,WAAW,CAACC,UAAZ,GAAyBF,IAAI,CAACE,UAAL,CAAgBC,MAAhB,CAAuB,UAACC,SAAD;AAAA,WAAeA,SAAS,CAAC7C,GAAV,KAAkBD,WAAjC;AAAA,GAAvB,CAAzB;AACA,MAAM+C,MAAM,GAAGJ,WAAW,CAAC1C,GAA3B;AACAH,EAAAA,QAAQ,CAACX,eAAe,CAACa,WAAD,CAAhB,CAAR;AACAF,EAAAA,QAAQ,CAACV,UAAU,CAAC2D,MAAD,EAASJ,WAAT,CAAX,CAAR;AACD","sourcesContent":["import { updateCharacter, deleteCharacter } from '../../redux/actions/characterActions';\nimport { updateUser } from '../../redux/actions/userActions';\n\nexport const setVisibility = {\n  sheetVisibility: 'Sheet visibility',\n  inventoryVisibility: 'Inventory visibility',\n  notesVisibility: 'Notes visibility',\n};\n\nexport function changeSetVisibility(\n  actualCharacter, setCharacterFunction, setId, actualSetVisibility, dispatch,\n) {\n  const updatedcharacter = { ...actualCharacter };\n  const characterId = updatedcharacter._id;\n  switch (setId) {\n    case actualSetVisibility.inventoryVisibility:\n      if (updatedcharacter.inventory.public) {\n        updatedcharacter.inventory.public = false;\n      } else {\n        updatedcharacter.inventory.public = true;\n      }\n      break;\n    case actualSetVisibility.sheetVisibility:\n      if (updatedcharacter.sheet.public) {\n        updatedcharacter.sheet.public = false;\n      } else {\n        updatedcharacter.sheet.public = true;\n      }\n      break;\n    case actualSetVisibility.notesVisibility:\n      if (updatedcharacter.notes.public) {\n        updatedcharacter.notes.public = false;\n      } else {\n        updatedcharacter.notes.public = true;\n      }\n      break;\n\n    default:\n      break;\n  }\n  setCharacterFunction(updatedcharacter);\n  dispatch(updateCharacter(characterId, updatedcharacter));\n}\n\nexport function displayDeleteCharacterModal(setDeleteCharacterModalView, deleteCharacterModalView) {\n  setDeleteCharacterModalView(!deleteCharacterModalView);\n}\n\nexport function displayEditModal(setModalVisibility, modalVisibility) {\n  setModalVisibility(!modalVisibility);\n}\n\nexport const editCharacterMethods = {\n  editCharacterName(actualCharacter, text, setCharacterFunction, dispatch) {\n    const updatedCharacter = { ...actualCharacter };\n    const characterId = updatedCharacter._id;\n\n    updatedCharacter.name = text;\n\n    setCharacterFunction(text);\n    dispatch(updateCharacter(characterId, updatedCharacter));\n  },\n  editCharacterGame(actualCharacter, text, setCharacterFunction, dispatch) {\n    const updatedCharacter = { ...actualCharacter };\n    const characterId = updatedCharacter._id;\n\n    updatedCharacter.game = text;\n\n    setCharacterFunction(text);\n    dispatch(updateCharacter(characterId, updatedCharacter));\n  },\n  editCharacterRace(actualCharacter, text, setCharacterFunction, dispatch) {\n    const updatedCharacter = { ...actualCharacter };\n    const characterId = updatedCharacter._id;\n\n    updatedCharacter.race = text;\n\n    setCharacterFunction(text);\n    dispatch(updateCharacter(characterId, updatedCharacter));\n  },\n  editCharacterClass(actualCharacter, text, setCharacterFunction, dispatch) {\n    const updatedCharacter = { ...actualCharacter };\n    const characterId = updatedCharacter._id;\n\n    updatedCharacter.characterClass = text;\n\n    setCharacterFunction(text);\n    dispatch(updateCharacter(characterId, updatedCharacter));\n  },\n  editCharacterLvl(actualCharacter, text, setCharacterFunction, dispatch) {\n    const updatedCharacter = { ...actualCharacter };\n    const characterId = updatedCharacter._id;\n\n    updatedCharacter.lvl = text;\n\n    setCharacterFunction(text);\n    dispatch(updateCharacter(characterId, updatedCharacter));\n  },\n  editName: 'Edit Name',\n  editGame: 'Edit Game',\n  editRace: 'Edit Race',\n  editClass: 'Edit Class',\n  editLvl: 'Edit Level',\n\n};\n\nexport function editCharacter(\n  editType, actualCharacter, actualTextValue, characterMethods, setEditModalView, editModalView,\n  setCharacterName, setCharacterGame, setCharacterRace, setCharacterClass, setCharacterLvl,\n  dispatch,\n) {\n  switch (editType) {\n    case characterMethods.editName:\n      characterMethods.editCharacterName(actualCharacter, actualTextValue,\n        setCharacterName, dispatch);\n      break;\n    case characterMethods.editGame:\n      characterMethods.editCharacterGame(actualCharacter, actualTextValue,\n        setCharacterGame, dispatch);\n      break;\n    case characterMethods.editRace:\n      characterMethods.editCharacterRace(actualCharacter, actualTextValue,\n        setCharacterRace, dispatch);\n      break;\n    case characterMethods.editClass:\n      characterMethods.editCharacterClass(actualCharacter, actualTextValue,\n        setCharacterClass, dispatch);\n      break;\n    case characterMethods.editLvl:\n      characterMethods.editCharacterLvl(actualCharacter, actualTextValue,\n        setCharacterLvl, dispatch);\n      break;\n    default:\n      break;\n  }\n  displayEditModal(setEditModalView, editModalView);\n}\n\nexport function removeCharacter(dispatch, characterId, user) {\n  debugger;\n  const updatedUser = { ...user };\n  updatedUser.characters = user.characters.filter((character) => character._id !== characterId);\n  const userId = updatedUser._id;\n  dispatch(deleteCharacter(characterId));\n  dispatch(updateUser(userId, updatedUser));\n}\n"]},"metadata":{},"sourceType":"module"}