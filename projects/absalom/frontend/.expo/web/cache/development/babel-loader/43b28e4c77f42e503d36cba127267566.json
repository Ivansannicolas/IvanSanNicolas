{"ast":null,"code":"import _regeneratorRuntime from \"@babel/runtime/regenerator\";\n\nvar pickImageFromLibrary = function pickImageFromLibrary(ImagePickerFunctions, actualCharacter, imageFunction, updateCharacterFunction, dispatchFunction, actualImageKey, loadError) {\n  var result;\n  return _regeneratorRuntime.async(function pickImageFromLibrary$(_context) {\n    while (1) {\n      switch (_context.prev = _context.next) {\n        case 0:\n          _context.prev = 0;\n          _context.next = 3;\n          return _regeneratorRuntime.awrap(ImagePickerFunctions.launchImageLibraryAsync({\n            mediaTypes: ImagePickerFunctions.MediaTypeOptions.All,\n            allowsEditing: true,\n            quality: 1,\n            base64: true\n          }));\n\n        case 3:\n          result = _context.sent;\n\n          if (!result.cancelled && result.base64) {\n            imageFunction(actualCharacter, result.base64, updateCharacterFunction, dispatchFunction, actualImageKey);\n          }\n\n          _context.next = 10;\n          break;\n\n        case 7:\n          _context.prev = 7;\n          _context.t0 = _context[\"catch\"](0);\n          dispatchFunction(loadError(_context.t0));\n\n        case 10:\n        case \"end\":\n          return _context.stop();\n      }\n    }\n  }, null, null, [[0, 7]], Promise);\n};\n\nexport default pickImageFromLibrary;","map":{"version":3,"sources":["/Users/ivansan/Documents/Programming-repos/absalom/frontend/src/components/CharacterSheet/CharacterSheetFunctions/CharacterSheetPickImage.js"],"names":["pickImageFromLibrary","ImagePickerFunctions","actualCharacter","imageFunction","updateCharacterFunction","dispatchFunction","actualImageKey","loadError","launchImageLibraryAsync","mediaTypes","MediaTypeOptions","All","allowsEditing","quality","base64","result","cancelled"],"mappings":";;AAAA,IAAMA,oBAAoB,GAAG,SAAvBA,oBAAuB,CAC3BC,oBAD2B,EAE3BC,eAF2B,EAG3BC,aAH2B,EAI3BC,uBAJ2B,EAK3BC,gBAL2B,EAM3BC,cAN2B,EAO3BC,SAP2B;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,2CAUJN,oBAAoB,CAACO,uBAArB,CAA6C;AAChEC,YAAAA,UAAU,EAAER,oBAAoB,CAACS,gBAArB,CAAsCC,GADc;AAEhEC,YAAAA,aAAa,EAAE,IAFiD;AAGhEC,YAAAA,OAAO,EAAE,CAHuD;AAIhEC,YAAAA,MAAM,EAAE;AAJwD,WAA7C,CAVI;;AAAA;AAUnBC,UAAAA,MAVmB;;AAgBzB,cAAI,CAACA,MAAM,CAACC,SAAR,IAAqBD,MAAM,CAACD,MAAhC,EAAwC;AACtCX,YAAAA,aAAa,CACXD,eADW,EAEXa,MAAM,CAACD,MAFI,EAGXV,uBAHW,EAIXC,gBAJW,EAKXC,cALW,CAAb;AAOD;;AAxBwB;AAAA;;AAAA;AAAA;AAAA;AA0BzBD,UAAAA,gBAAgB,CAACE,SAAS,aAAV,CAAhB;;AA1ByB;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,CAA7B;;AA8BA,eAAeP,oBAAf","sourcesContent":["const pickImageFromLibrary = async (\n  ImagePickerFunctions,\n  actualCharacter,\n  imageFunction,\n  updateCharacterFunction,\n  dispatchFunction,\n  actualImageKey,\n  loadError,\n) => {\n  try {\n    const result = await ImagePickerFunctions.launchImageLibraryAsync({\n      mediaTypes: ImagePickerFunctions.MediaTypeOptions.All,\n      allowsEditing: true,\n      quality: 1,\n      base64: true,\n    });\n    if (!result.cancelled && result.base64) {\n      imageFunction(\n        actualCharacter,\n        result.base64,\n        updateCharacterFunction,\n        dispatchFunction,\n        actualImageKey,\n      );\n    }\n  } catch (error) {\n    dispatchFunction(loadError(error));\n  }\n};\n\nexport default pickImageFromLibrary;\n"]},"metadata":{},"sourceType":"module"}